[[plugins]]
repo = 'Shougo/vimproc.vim'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = ''' "{{{ nnoremap <silent><C-t> :NERDTreeToggle<CR>
    let g:NERDTreeShowHidden = 1
    let g:NERDTreeHighlightCursorline=0 " auto execute
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
    autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") |
        \ exe 'NERDTree' argv()[0] | wincmd p | ene | endif
''' #}}}

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'vim-scripts/vim-auto-save'
hook_add = ''' "{{{
    let g:auto_save = 1
''' #}}}

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = ''' "{{{
    let g:lightline = {
        \ 'colorscheme': 'wombat'
        \ }
''' #}}}

[[plugins]]
repo = 'maximbaz/lightline-ale'
hook_add = ''' "{{{
    let g:lightline = {}

    let g:lightline.component_expand = {
        \  'linter_checking': 'lightline#ale#checking',
        \  'linter_warnings': 'lightline#ale#warnings',
        \  'linter_errors': 'lightline#ale#errors',
        \  'linter_ok': 'lightline#ale#ok',
        \ }

    let g:lightline.component_type = {
        \ 'linter_checking': 'left',
        \ 'linter_warnings': 'warning',
        \ 'linter_errors': 'error',
        \ 'linter_ok': 'left',
        \ }
    let g:lightline.active = { 'right': [[ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ]] }
''' #}}}

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = ''' "{{{
    set list listchars=tab:\¦\
''' #}}}

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = ''' "{{{
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#auto_complete_start_length = 1
    autocmd ColorScheme * highlight Pmenu ctermbg=245 ctermfg=235
    autocmd ColorScheme * highlight PmenuSel ctermbg=237 ctermfg=245
    call deoplete#custom#option({
        \ 'auto_complete_delay': 100,
        \ 'smart_case': v:true,
        \ })
''' #}}}

[[plugins]]
repo = 'Shougo/neco-syntax'

# TODO: aleと競合する？
# [[plugins]]
# repo = 'vim-syntastic/syntastic'
# hook_add = ''' "{{{
#     set statusline+=%#warningmsg#
#     set statusline+=%*
#
#     let g:syntastic_always_populate_loc_list = 1
#     let g:syntastic_auto_loc_list = 1
#     let g:syntastic_check_on_open = 1
#     let g:syntastic_check_on_wq = 0
#
#     " active_filetypesに言語を追加すると自動実行される
#     let g:syntastic_mode_map = {
#         \ 'mode': 'passive',
#         \ 'active_filetypes': []
#     \ }
#
#     let g:syntastic_javascript_checkers=['eslint']
#     let g:syntastic_ruby_checkers = ['rubocop']
#
#     let g:syntastic_error_symbol='✗'
#     let g:syntastic_style_error_symbol = '✗'
#     let g:syntastic_warning_symbol = '⚠'
#     let g:syntastic_style_warning_symbol = '⚠'
# ''' #}}}
# 色はoptions.rc.vimに記述

[[plugins]]
repo = 'kana/vim-submode'
hook_add = ''' "{{{
    call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
    call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
    call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
    call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
    call submode#map('winsize', 'n', '', '>', '<C-w>>')
    call submode#map('winsize', 'n', '', '<', '<C-w><')
    call submode#map('winsize', 'n', '', '+', '<C-w>+')
    call submode#map('winsize', 'n', '', '-', '<C-w>-')
''' #}}}

[[plugins]]
repo = 'kassio/neoterm'
hook_add = ''' "{{{
    let g:neoterm_default_mod = "belowright"
    let g:neoterm_size = 9
''' #}}}

[[plugins]]
repo = 'guns/xterm-color-table.vim'

[[plugins]]
repo = 'cocopon/pgmnt.vim'

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'roxma/nvim-yarp'
if = '''! has('nvim')'''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = '''! has('nvim')'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = ''' "{{{
    " Error and warning signs.
    let g:ale_sign_error = '⤫'
    let g:ale_sign_warning = '⚠'
''' #}}}


#################
# For languages
#################
[[plugins]]
repo = 'fatih/vim-go'
hook_add = ''' "{{{
    let g:go_autodetect_gopath = 1
    let g:go_version_warning = 0
    let g:go_fmt_command = "goimports"

    " avoid conflict with vim-auto-save
    let g:go_fmt_autosave = 0

    " highlight
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_types = 1

    " TODO: debugger window
''' #}}}

[[plugins]]
repo = 'zchee/deoplete-go'
build = 'make'
on_ft = 'go'
depends = ['deoplete.nvim']
hook_add = ''' "{{{
    let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
    let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']

    let g:deoplete#sources#go#source_importer = 1
    let g:deoplete#sources#go#pointer = 1
    let g:deoplete#sources#go#unimported_packages = 1
''' #}}}

[[plugins]]
repo = 'autozimu/LanguageClient-neovim'
build = 'bash install.sh'
rev = 'next'
hook_add = '''
  set hidden
  let g:LanguageClient_serverCommands = {
      \ 'go': ['gopls']
      \ }
  let g:LanguageClient_loadSettings = 1
  nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
  nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
'''

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'pangloss/vim-javascript'

[[plugins]]
repo = 'heavenshell/vim-jsdoc'

[[plugins]]
repo = 'billyvg/tigris.nvim'
on_ft = ['javascript', 'javascript.jsx']
hook_add = ''' "{{{
    let g:tigris#enabled = 1
    let g:tigris#on_the_fly_enabled = 1
    let g:tigris#delay = 300
''' #}}}

[[plugins]]
repo = 'hashivim/vim-terraform'

[[plugins]]
repo = 'juliosueiras/vim-terraform-completion'

