[[plugins]]
repo = 'Shougo/vimproc.vim'

[[plugins]]
repo = 'scrooloose/nerdtree'
hook_add = ''' "{{{ nnoremap <silent><C-t> :NERDTreeToggle<CR>
    let g:NERDTreeShowHidden = 1
    let g:NERDTreeHighlightCursorline=0 " auto execute
    autocmd StdinReadPre * let s:std_in=1
    autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
    autocmd VimEnter * if argc() == 1 && isdirectory(argv()[0]) && !exists("s:std_in") |
        \ exe 'NERDTree' argv()[0] | wincmd p | ene | endif
''' #}}}

[[plugins]]
repo = 'tomtom/tcomment_vim'

[[plugins]]
repo = 'vim-scripts/vim-auto-save'
hook_add = ''' "{{{
    let g:auto_save = 1
''' #}}}

[[plugins]]
repo = 'ConradIrwin/vim-bracketed-paste'

[[plugins]]
repo = 'itchyny/lightline.vim'
hook_add = ''' "{{{
    " TODO: 動いてないかも

    function! CocCurrentFunction()
        return get(b:, 'coc_current_function', '')
    endfunction

    let g:lightline = {
        \ 'colorscheme': 'wombat',
        \ 'active': {
        \   'left': [ [ 'mode', 'paste' ],
        \             [ 'cocstatus', 'currentfunction', 'readonly', 'filename', 'modified' ] ]
        \ },
        \ 'component_function': {
        \   'cocstatus': 'coc#status',
        \   'currentfunction': 'CocCurrentFunction'
        \ },
    \ }
''' #}}}

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'Yggdroot/indentLine'
hook_add = ''' "{{{
    set list listchars=tab:\¦\
''' #}}}

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_add = ''' "{{{
    let g:deoplete#enable_at_startup = 1
    let g:deoplete#auto_complete_start_length = 1
    autocmd ColorScheme * highlight Pmenu ctermbg=245 ctermfg=235
    autocmd ColorScheme * highlight PmenuSel ctermbg=237 ctermfg=245

    call deoplete#custom#option({
        \ 'auto_complete_delay': 200,
        \ 'smart_case': v:true,
        \ })

    autocmd FileType go call deoplete#custom#buffer_option('auto_complete', v:false)
''' #}}}

[[plugins]]
repo = 'kana/vim-submode'
hook_add = ''' "{{{
    call submode#enter_with('winsize', 'n', '', '<C-w>>', '<C-w>>')
    call submode#enter_with('winsize', 'n', '', '<C-w><', '<C-w><')
    call submode#enter_with('winsize', 'n', '', '<C-w>+', '<C-w>+')
    call submode#enter_with('winsize', 'n', '', '<C-w>-', '<C-w>-')
    call submode#map('winsize', 'n', '', '>', '<C-w>>')
    call submode#map('winsize', 'n', '', '<', '<C-w><')
    call submode#map('winsize', 'n', '', '+', '<C-w>+')
    call submode#map('winsize', 'n', '', '-', '<C-w>-')
''' #}}}

[[plugins]]
repo = 'kassio/neoterm'
hook_add = ''' "{{{
    let g:neoterm_default_mod = "belowright"
    let g:neoterm_size = 9
''' #}}}

[[plugins]]
repo = 'guns/xterm-color-table.vim'

[[plugins]]
repo = 'cocopon/pgmnt.vim'

[[plugins]]
repo = 'cocopon/iceberg.vim'

[[plugins]]
repo = 'roxma/nvim-yarp'
if = '''! has('nvim')'''

[[plugins]]
repo = 'roxma/vim-hug-neovim-rpc'
if = '''! has('nvim')'''

[[plugins]]
repo = 'w0rp/ale'
hook_add = ''' "{{{
    let g:ale_sign_error = '⤫'
    let g:ale_sign_warning = '⚠'
    let g:ale_sign_column_always = 1
    let g:ale_change_sign_column_color = 0

    let g:ale_enabled = 1
    let g:ale_lint_on_text_changed = 0
    let g:ale_lint_on_save = 1
    let g:ale_lint_on_enter = 1
    let g:ale_lint_on_filetype_changed = 1
    let g:ale_lint_on_insert_leave = 1

    let g:ale_linters = {'go': []}
''' #}}}


#################
# For languages
#################
[[plugins]]
repo = 'fatih/vim-go'
hook_add = ''' "{{{
    let g:go_autodetect_gopath = 1
    let g:go_version_warning = 0
    let g:go_fmt_command = "goimports"

    " avoid conflict with vim-auto-save
    let g:go_fmt_autosave = 0

    " highlight
    let g:go_highlight_build_constraints = 1
    let g:go_highlight_extra_types = 1
    let g:go_highlight_fields = 1
    let g:go_highlight_functions = 1
    let g:go_highlight_methods = 1
    let g:go_highlight_operators = 1
    let g:go_highlight_structs = 1
    let g:go_highlight_types = 1

    " debug window
    let g:go_debug_windows = {
        \ 'stack': 'leftabove 60vnew',
        \ 'out':   'botright 15new',
        \ 'vars':  'leftabove 100vnew',
    \ }

    " lint
      let g:go_metalinter_command = "golangci-lint"
''' #}}}

# [[plugins]]
# repo = 'zchee/deoplete-go'
# build = 'make'
# on_ft = 'go'
# depends = ['deoplete.nvim']
# hook_add = ''' "{{{
#     let g:deoplete#sources#go#gocode_binary = $GOPATH.'/bin/gocode'
#     let g:deoplete#sources#go#sort_class = ['package', 'func', 'type', 'var', 'const']
#     let g:deoplete#sources#go#source_importer = 1
#     let g:deoplete#sources#go#package_dot = 0
#     let g:deoplete#sources#go#pointer = 1
#     let g:deoplete#sources#go#unimported_packages = 1
# ''' #}}}

# [[plugins]]
# repo = 'autozimu/LanguageClient-neovim'
# build = 'bash install.sh'
# rev = 'next'
# hook_add = '''
#   set hidden
#   let g:LanguageClient_serverCommands = {
#       \ 'go': ['gopls']
#       \ }
#
#   let g:LanguageClient_loadSettings = 1
#   let g:LanguageClient_useVirtualText = 0
#
#   nnoremap <silent> K :call LanguageClient#textDocument_hover()<CR>
#   nnoremap <silent> gd :call LanguageClient#textDocument_definition()<CR>
# '''

[[plugins]]
repo = 'neoclide/coc.nvim'
build = './install.sh nightly'
hook_add = 'source ~/.vim/coc-settings.vim'

[[plugins]]
repo = 'cespare/vim-toml'

[[plugins]]
repo = 'hashivim/vim-terraform'

[[plugins]]
repo = 'juliosueiras/vim-terraform-completion'

[[plugins]]
repo = 'Glench/Vim-Jinja2-Syntax'

[[plugins]]
repo = 'davidhalter/jedi-vim'

